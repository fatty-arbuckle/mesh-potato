#! /bin/bash

ME=`basename $0`

source settings.sh
source auth_helpers.sh
source validation_helpers.sh
source imaging_helpers.sh
source update_helper.sh


function test {
    local the_cmd="$@"
    echo "     ---> ${the_cmd}"
    eval "${the_cmd}"
    local status=$?
    if [ $status -ne 0 ]; then
        echo "***** error with $1" >&2
        exit
    fi
    return $status
}

help() {
    echo
    echo "${ME} --target <device>"
    echo
    echo "  Required:"
    echo
    echo "    -t, --target <device>          specify the device to create the new image on."
    echo "                                   WARNING: this will be destructive to the device!"
    echo
    echo "  Optional:"
    echo
    echo "    -i, --image <?.tar.gz>         specify the Arch Linux RPi image to use."
    echo
    echo "    -h, --host <host name>         specify the host name of the new node."
    echo
    echo "    -p, --public_key <public key>  specify public SSH key to use to connect to the Pi."
    echo "                                   NOTE: If no key is specified the key in ${SSH_ID_DIR}/host_id.pub"
    echo "                                         will be used; if no key exists there one will be created."
    echo
    echo "    --ca <CA certificate>          specify the certificate authority to use when creating MQTT certificates."
    echo "                                   NOTE: If no certificate is specified the one in ${MQTT_CA_DIR}/ca_cert.pem"
    echo "                                         will be used; if no certificate exists there one will be created."
    echo
    echo "    --key <CA key>                 specify the key that goes with the CA certificate (see -ca above)"
    echo "                                   NOTE: If no key is specified the one in ${MQTT_CA_DIR}/ca_key.pem"
    echo "                                         will be used; if no key exists there one will be created."
    echo
    exit
}

while [[ $# > 1 ]]
do
key="$1"

case $key in
    -t|--target)
        TARGET="$2"
        shift
    ;;
    -i|-image)
        BASE_IMAGE="$2"
        shift
    ;;
    -h|--host)
        PI_HOSTNAME="$2"
        shift
    ;;
    -p|--public_key)
        HOST_PUBLIC_KEY="$2"
        shift
    ;;
    --ca)
        CA_CERT="$2"
        shift
    ;;
    --key)
        CA_KEY="$2"
        shift
    ;;
    *)
        # unknown option
        help
    ;;
esac
shift # past argument or value
done

test validate_root_privilege
test validate_target ${TARGET}
test validate_base_image ${BASE_IMAGE}
test validate_hostname ${PI_HOSTNAME}
test validate_ssh_host_key ${HOST_PUBLIC_KEY}
test validate_certificate_authority ${CA_KEY} ${CA_CERT}


echo
echo "!!! ERASING ALL DATA ON ${TARGET} !!!"
echo

while true; do
    echo
    read -p "Do you wish erase all of the data on ${TARGET}? " yn
    case $yn in
        [Yy]* )
            break
            ;;
        [Nn]* )
            echo "Ok. Exitting..."
            echo
            exit
            ;;
        * )
            echo "Please answer yes or no."
            ;;
    esac
done


IMAGE_ROOT=${OUTPUT_DIR}/mnt/image
TARGET_BOOT=${TARGET}1
TARGET_ROOT=${TARGET}2

unmount
test partion_disk
test create_filesystem
test copy_image_to_disk
test update_image_fn ${IMAGE_ROOT}/root ${PI_HOSTNAME} ${HOST_PUBLIC_KEY}
test unmount

echo "===> Done.  You may remove '${TARGET}'"
