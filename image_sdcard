#! /bin/bash

ME=`basename $0`

if [ "$EUID" -ne 0 ]
then
    echo
    echo "*** Please run ${ME} as root"
    echo
    exit
fi

function test {
    local the_cmd="$@"
    echo "     ---> ${the_cmd}"
    eval "${the_cmd}"
    local status=$?
    if [ $status -ne 0 ]; then
        echo "***** error with $1" >&2
        exit
    fi
    return $status
}

help() {
    echo 
    echo "${ME} --target <device>"
    echo
    echo "    -t, --target <device>          specify the device to create the new image on."
    echo "                                   WARNING: this will be destructive to the device!"
    echo
    echo "    -i, --image <?.tar.gz>         specify the Arch Linux RPi image to use."
    echo
    echo "    -h, --host <host name>         specify the host name of the new node."
    echo
    echo "    -n, --lan <LAN inferface>      specify the name of the LAN interface the host is on."
    echo
    echo "    -p, --public_key <public key>  specify public SSH key to use to connect to the Pi."
    echo "                                   NOTE: If no key is specified the key in ./access/host_id.pub"
    echo "                                         will be used; if no key exists there one will be created."
    echo
    exit
}

while [[ $# > 1 ]]
do
key="$1"

case $key in
    -t|--target)
        TARGET="$2"
        shift 
    ;;
    -i|-image)
        BASE_IMAGE="$2"
        shift 
    ;;
    -h|--host)
        PI_HOSTNAME="$2"
        shift 
    ;;
    -n|--lan)
        LAN_INTERFACE="$2"
        shift 
    ;;
    -p|--public_key)
        HOST_PUBLIC_KEY="$2"
        shift 
    ;;
    *)
        # unknown option
        help
    ;;
esac
shift # past argument or value
done

if [ -z "$TARGET" ]
then
    echo
    echo "*** The --target option cannot be empty"
    help
fi

if [ ! -b "$TARGET" ]
then
    echo
    echo "*** '${TARGET}' must be a block device"
    echo
    exit
fi

if [ -z "$BASE_IMAGE" ]
then
    echo
    echo "*** The --image option cannot be empty"
    help
fi

if [ ! -f "$BASE_IMAGE" ]
then
    echo
    echo "*** '${BASE_IMAGE}' must exist and be a valid file"
    echo
    exit
fi

if [ -z "$PI_HOSTNAME" ]
then
    RANDHOSTSTRING=`< /dev/urandom tr -dc A-Za-z0-9 | head -c${1:-8}`
    PI_HOSTNAME="mesh-potato-${RANDHOSTSTRING}"
fi

if [ -z "$LAN_INTERFACE" ]
then
    LAN_INTERFACE="enp0s20u3"
fi

VALID_IPV6=`ip addr show ${LAN_INTERFACE} | grep inet6 | awk '{print $2}' | awk -F/ '{print $1}'`
if [ -z "$VALID_IPV6" ]
then
    echo
    echo "*** '${LAN_INTERFACE}' must be up with an IPV6 address to continue"
    echo
    exit
fi

if [ ! -f "$HOST_PUBLIC_KEY" ]
then
    HOST_PUBLIC_KEY=access/host_id.pub
    if [ ! -f "$HOST_PUBLIC_KEY" ]
    then
        echo "===> Creating SSH key for accessing Pi"
        test ssh-keygen -b 2048 -N "" -C "mesh-potato host access" -f access/host_id
    fi
fi

echo
echo "!!! ERASING ALL DATA ON ${TARGET} !!!"
echo

while true; do
    echo
    read -p "Do you wish erase all of the data on ${TARGET}? " yn
    case $yn in
        [Yy]* )
            break
            ;;
        [Nn]* )
            echo "Ok. Exitting..."
            echo
            exit
            ;;
        * )
            echo "Please answer yes or no."
            ;;
    esac
done

OUTPUT=tmp
IMAGE_ROOT=${OUTPUT}/image
TARGET_BOOT=${TARGET}1 
TARGET_ROOT=${TARGET}2 

echo "===> Attempting to unmount '${TARGET}'" 

umount ${IMAGE_ROOT}/root ${IMAGE_ROOT}/boot

echo "===> Partitioning the disk"

echo "o
n
p
1

+512M
t
c
n
p
2


p
w
" | fdisk ${TARGET} 

echo "===> Making the filesystems on '${TARGET}'"

test mkfs.vfat ${TARGET_BOOT}
test mkdir -p ${IMAGE_ROOT}/boot
test mount ${TARGET_BOOT} ${IMAGE_ROOT}/boot

echo "y" | test mkfs.ext4 -q ${TARGET_ROOT}
test mkdir -p ${IMAGE_ROOT}/root
test mount ${TARGET_ROOT} ${IMAGE_ROOT}/root

echo "===> Copying '${BASE_IMAGE}' to '${TARGET}'" 

test bsdtar -xpf ${BASE_IMAGE} -C ${IMAGE_ROOT}/root
test sync

test mv ${IMAGE_ROOT}/root/boot/* ${IMAGE_ROOT}/boot/

echo "===> Setting up the image" 

test ./update_image ${IMAGE_ROOT}/root ${PI_HOSTNAME} ${LAN_INTERFACE} ${HOST_PUBLIC_KEY}

echo "===> Unmounting'${TARGET}'" 

test umount ${IMAGE_ROOT}/root ${IMAGE_ROOT}/boot

echo "===> Done.  You may remove '${TARGET}'" 
